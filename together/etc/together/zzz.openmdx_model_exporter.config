#/*
# * ====================================================================
# * Project:     openmdx, http://www.openmdx.org/
# * Name:        $Id: zzz.openmdx_model_exporter.config,v 1.2 2004/06/28 23:44:49 wfro Exp $
# * Description: RoseExporterMain command-line tool
# * Revision:    $Revision: 1.2 $
# * Owner:       OMEX AG, Switzerland, http://www.omex.ch
# * Date:        $Date: 2004/06/28 23:44:49 $
# * ====================================================================
# *
# * This software is published under the BSD license
# * as listed below.
# * 
# * Copyright (c) 2004, OMEX AG, Switzerland
# * All rights reserved.
# * 
# * Redistribution and use in source and binary forms, with or
# * without modification, are permitted provided that the following
# * conditions are met:
# * 
# * * Redistributions of source code must retain the above copyright
# * notice, this list of conditions and the following disclaimer.
# * 
# * * Redistributions in binary form must reproduce the above copyright
# * notice, this list of conditions and the following disclaimer in
# * the documentation and/or other materials provided with the
# * distribution.
# * 
# * * Neither the name of the openMDX team nor the names of its
# * contributors may be used to endorse or promote products derived
# * from this software without specific prior written permission.
# * 
# * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# * POSSIBILITY OF SUCH DAMAGE.
# * 
# * ------------------
# * 
# * This product includes software developed by the Apache Software
# * Foundation (http://www.apache.org/).
# */
#
#******************************************************************************
# Define additional root directories for manifest files
# (config file: scriptloader.config)
#******************************************************************************

# path to find manifest file for Together Model Exporter
scriptloader.root.4 = file("d:/pgm/Together6.0/openmdx-model-exporter")
scriptloader.root.4.name = ["openMDX"]

#******************************************************************************
# Add openMDX properties to the Together Property Inspector
# (config file: changes.config)
#******************************************************************************
inspector.node.element.*.Class.item.Properties.item.isAbstract = ChoiceField( { values := { "false", "true" } } )
inspector.node.element.*.Class.item.Properties.item.isAbstract.name = abstract (openMDX)
inspector.node.element.*.AssociationLink.item.Properties.item.isDerived = ChoiceField( { values := { "false", "true" } } )
inspector.node.element.*.AssociationLink.item.Properties.item.isDerived.name = derived (openMDX)
inspector.node.element.*.AssociationLink.item.Properties.item.clientConstraints = StringField
inspector.node.element.*.AssociationLink.item.Properties.item.clientConstraints.name = client constraints (openMDX)
inspector.node.element.*.AssociationLink.item.Properties.item.supplierConstraints = StringField
inspector.node.element.*.AssociationLink.item.Properties.item.supplierConstraints.name = supplier constraints (openMDX)
inspector.node.element.*.Attribute.item.Properties.item.isDerived = ChoiceField( { values := { "false", "true" } } )
inspector.node.element.*.Attribute.item.Properties.item.isDerived.name = derived (openMDX)
inspector.node.element.*.Attribute.item.openmdx.item.isChangeable = ChoiceField( { values := { "false", "true" } } )
inspector.node.element.*.Attribute.item.openmdx.item.isChangeable.name = isChangeable
inspector.node.element.*.Attribute.item.openmdx.item.maxLength = StringField
inspector.node.element.*.Attribute.item.openmdx.item.maxLength.name = maxLength
inspector.node.element.*.Operation.item.Properties.item.isQuery = ChoiceField( { values := { "false", "true" } } )
inspector.node.element.*.Operation.item.Properties.item.isQuery.name = isQuery (openMDX)

#******************************************************************************
# Modify the display of class diagrams to have better visual representation of
# openMDX properties, qualifiers, ...
# (config file: view.config)
#******************************************************************************

#----------Attribute -----------------------------------------------------------------------
view.map.*.Attribute.true=
\  hasHyperlinks = hasProperty("$hyperLink") || hasProperty("url");
\
\  name=getProperty("alias");
\  if (name==null,
\    name=getProperty("$name")
\  );
\
#--------- openMDX ---------------------------------------------------------------------------
\  name=formatAttributeName(name);
\  derived = getProperty("isDerived");
\  if (derived == "true", name = "/ " + name);
\  aStereotype = getProperty("stereotype");
\  if(aStereotype != null, name = "<<" + aStereotype + ">> " + name);
#--------- openMDX ---------------------------------------------------------------------------
\
\  label=label(name);
\  setGraphicObject(label);
\
\  if(hasProperty("$static"), label->setUnderlined());
\  setInplaceEditor({outProperty:="$attributeInplaceEditing", default:=true});
\
\  attribute_comp=%parent%->getGraphicPropertyAsNode("ac#");
\  if ((attribute_comp!=null),
\    if(setCompartment(attribute_comp) == null, hideGraphicElement()),
\    hideGraphicElement()
\  );
\
\  if(hasHyperlinks, setForeground(blue));
\  if(hasHyperlinks && hasProperty("$pure"),
\   hideGraphicElement()
\  );
\
\
#\  ourStereotype = getProperty("stereotype");
#\  if(ourStereotype != null,
#\    (
#\    stereoLabel = insertBefore( label( "<<"+ourStereotype+">>" ) );
#\    stereoLabel->setGraphicProperty( "stereotype", "yes" );
#\    stereoLabel->setInplaceEditor({ property:="stereotype", element:=%element% });
#\    stereoLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
#\    stereoLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
#\    )
#\  );
\
\
\  if(hasCachedOptionValue("option.associationLinks.showAttribute", "Automatic") &&
\     hasProperty("$linkPrefix"),
\        hideGraphicElement()
\  )


#-------- AssociationLink ------------------------------------------------------

view.map.*.AssociationLink.true =
\   if(hasProperty("$aggregation"),
\     (
\     setForeground(RGB(0,0,130));
\     icon = addIcon("Rhomb","OnSource");
\     if(hasProperty("$byValue"),icon->setBackground(RGB(0,0,130)))
\     ),
\     (
\     setForeground(RGB(0,0,255))
\     )
\   );
\
\   drawDirected = false;
\   if (hasProperty("directed"),
\       drawDirected = true,
\       if (hasProperty("undirected"),
\           drawDirected = false,
\           if (hasCachedOptionValue("option.associationLinks.directed", "All"),
\               drawDirected = true,
\               if (hasCachedOptionValue("option.associationLinks.directed", "No"),
\                   drawDirected = false,
\                   drawDirected = !hasProperty("$linkPrefix")
\               )
\           )
\       )
\   );
\   if (drawDirected,
\       (
\       addIcon("OpenTriangle","OnDestination");
\       if(hasProperty("bidirectional"), addIcon("OpenTriangle","OnSource"))
\       )
\   );
\
\   icon = addLabelIcon(getProperty("clientCardinality"),"AboveLeftSource");
\   icon->setInplaceEditor({property:="clientCardinality"});
\   icon = addLabelIcon(getProperty("supplierCardinality"),"AboveLeftDestination");
\   icon->setInplaceEditor({property:="supplierCardinality"});
\   icon = addLabelIcon(getProperty("clientRole"),"UnderRightSource");
\   icon->setInplaceEditor({property:="clientRole"});
\   icon = addLabelIcon(getProperty("supplierRole"),"UnderRightDestination");
\   icon->setInplaceEditor({property:="supplierRole"});
#--------- openMDX ---------------------------------------------------------------------------
#\   icon = addLabelIcon(getProperty("clientQualifier"),"UnderRightSource");
#\   icon->setInplaceEditor({property:="clientQualifier"});
#\   icon = addLabelIcon(getProperty("supplierQualifier"),"UnderRightDestination");
#\   icon->setInplaceEditor({property:="supplierQualifier"});
\   icon = addLabelBoxIcon(getProperty("clientQualifier"),"OnSource");
\   icon->setInplaceEditor({property:="clientQualifier"});
\   icon = addLabelBoxIcon(getProperty("supplierQualifier"),"OnDestination");
\   icon->setInplaceEditor({property:="supplierQualifier"});
\
\   clientConstraints = getProperty("clientConstraints");
\   if (clientConstraints != null, 
\     clientConstraints = "{ " + clientConstraints + " }";
\     icon = addLabelIcon(clientConstraints,"UnderRightSource")
\   );
\   supplierConstraints = getProperty("supplierConstraints");
\   if (supplierConstraints != null, 
\     supplierConstraints = "{ " + supplierConstraints + " }";
\     icon = addLabelIcon(supplierConstraints,"UnderRightDestination")
\   );
\
\   derived = getProperty("isDerived");
\   label = getProperty("label");
\   if (derived == "true", label = "/ " + label);
\   if( hasPropertyValue("labelDirection","forward"),
\       icon = addArrowedLabelIcon( label , "AsideCenter", "ArrowCompactCall",null, false ),
\     (
\       if (hasPropertyValue("labelDirection","reverse"),
\           icon = addArrowedLabelIcon( label , "AsideCenter", "ArrowCompactCall",null, true ),
\           icon = addLabelIcon(label,"AsideCenter")
\       )
\     )
\   );
#--------- openMDX ---------------------------------------------------------------------------
\
#\   if( hasPropertyValue("labelDirection","forward"),
#\       icon = addArrowedLabelIcon( getProperty("label") , "AsideCenter", "ArrowCompactCall",null, false ),
#\     (
#\       if (hasPropertyValue("labelDirection","reverse"),
#\           icon = addArrowedLabelIcon( getProperty("label") , "AsideCenter", "ArrowCompactCall",null, true ),
#\           icon = addLabelIcon(getProperty("label"),"AsideCenter")
#\       )
#\     )
#\   );
#\   icon = addLabelIcon(getProperty("label"),"AsideCenter");
\   icon->setReshapable( true );
\   icon->setResizable( false );
\   icon->setSelectable( true );
\   icon->setInplaceEditor({property:="label"});
\
\   icon = addLabelBoxIcon(getProperty("associationAsClass"),"AsideCenter");
\   icon->setInplaceEditor({property:="associationAsClass"});
\   if(hasCachedOptionValue("option.associationLinks.showAttribute", "No"),
\     hideElement(findElement(getProperty("$linkMember")))
\     );
\   if(hasCachedOption("option.dependencyLinks.showBetweenClasses"),
\     hideElement(findAutodependencyLink())
\     )

#\   if(hasCachedOptionValue("option.associationLinks.showAttribute", "Automatic") &&
#\      hasProperty("$linkPrefix"),
#\        hideElement(findElement(getProperty("$linkMember")))
#\     )


#----------Class ---------------------------------------------------------------------------
view.macro.Class=
\
\  class=%diagram_element%;
\
\  if( ( hasCachedDiagramPropertyValue( "$shapeType", "ComponentDiagram" ) ||
\        hasCachedDiagramPropertyValue( "$shapeType", "DeploymentDiagram" ) ||
\        hasViewProperty("showCircle") ) &&
\        hasProperty( "$interface" ),
\      setGraphicObject( "RectangleInvisible" );
\      shape = addCompartment( "Circle", "shape" );
\      shadow=getViewProperty("2DLook");if (hasCachedOption( "option.shadows") && shadow==null || shadow=="3D", shape->setShadow(3, RGB(0,0,128)));
\      shape->setLayoutConstraints( minWidth(30), maxWidth(30), minHeight(30), maxHeight(30) )
\    ,
\      if( (hasProperty("$ejbRole") && !hasCachedDiagramPropertyValue( "$shapeType", "RobustnessDiagram" )),
\          setGraphicObject("BeanComponent");
\          icons = addCompartment("RectangleInvisible", "$icons");
\          icons->setLayout("Move");
\          ejbMark = icons->addCompartment("EJBMark", "ejbMark");
\          ejbMark->setLayoutConstraints( minWidth(6), maxWidth(6), minHeight(6), maxHeight(6),
\                                         verticalAlign("center"), horizontalAlign("center") )
\    ,
\      if( hasProperty("$template"),
\          setGraphicObject( "RectangleInvisible" );
\          top=addCompartment("RectangleInvisible","top");
\          top->setLayout( "Horizontal" );
\          top->setLayoutConstraints(PreferredHeight(10), fixedHeight(true));
\          left=top->addCompartment("RectangleInvisible","left");
\          left->setLayoutConstraints(preferredWidth(20));
\          left->setLayout("Vertical");
\          left_top=left->addCompartment("RectangleInvisible","left_top");
\          left_top->setLayoutConstraints(minHeight(10), fixedHeight(true));
\          left_bottom=left->addCompartment(rectangle(true,true,true,false),"left_bottom");
\          right=top->addCompartment("RectangleInvisible","right");
\          right->setLayoutConstraints(fixedWidth(true),insets(0,0,0,1));
\
\          template_node=makeTemplateListFromString( getProperty("$templateParamText") );
\          template=right->addToCompartment(template_node,null);
\          template->setLineStyle("dashed");
#\         template->setBackground(yellow);
\
\          bottom=addCompartment("RectangleInvisible","top");
\          bottom->setLayout( "Horizontal" );
\          class = bottom->addCompartment( rectangle(true,false,true,true), "class" );
\          bottom_right=bottom->addCompartment("RectangleInvisible","bottom_right");
\          bottom_right->setLayoutConstraints(minWidth(10), fixedWidth(true))
\     ,
\           if (hasProperty("stereotype"),
\            if((hasPropertyValue("stereotype", "actor") && !hasProperty("trtelement"))
\                || (hasPropertyValue("stereotype", "actor") && hasProperty("trtelement") && hasProperty("useStereotypeIcon")),
\                  setGraphicObject( "RectangleInvisible" );
\                  shape = addCompartment( "ActorBold", "shape" );
\                  shadow=getViewProperty("2DLook");
\                  if (hasCachedOption( "option.shadows") && shadow==null || shadow=="3D", setShadow(3, RGB(0,0,128)));
\                  shape->setLayoutConstraints( minWidth(30), minHeight(30), preferredWidth(52), preferredHeight(52),fixedHeight(true) )
\           ,
\           if( hasPropertyValue( "stereotype", "Boundary" ),
\                setGraphicObject( "RectangleInvisible" );
\                shape = addCompartment( "Boundary", "shape2" );
\                shadow=getViewProperty("2DLook");
\                if (hasCachedOption( "option.shadows") && shadow==null || shadow=="3D", setShadow(3, RGB(0,0,128)));
\                shape->setLayoutConstraints( minWidth(30), minHeight(30), preferredWidth(30), preferredHeight(30),fixedHeight(true) )
\           ,
\           if( hasPropertyValue( "stereotype", "Entity" ),
\                 setGraphicObject( "RectangleInvisible" );
\                 shape = addCompartment( "BusinessEntity", "shape" );
\                 shadow=getViewProperty("2DLook");
\                 if (hasCachedOption( "option.shadows") && shadow==null || shadow=="3D", setShadow(3, RGB(0,0,128)));
\                 shape->setLayoutConstraints( minWidth(30), minHeight(30), preferredWidth(30), preferredHeight(30),fixedHeight(true) )
\           ,
\           if( hasPropertyValue( "stereotype", "Control" ),
\                 setGraphicObject( "RectangleInvisible" );
\                 shape = addCompartment( "Controller", "shape" );
\                 shadow=getViewProperty("2DLook");
\                 if (hasCachedOption( "option.shadows") && shadow==null || shadow=="3D", setShadow(3, RGB(0,0,128)));
\                 shape->setLayoutConstraints( minWidth(30), minHeight(30), preferredWidth(30), preferredHeight(30),fixedHeight(true) )
\           ,
\                               setGraphicObject( "RectangleObject" )
\                       ))))
\                       ,
\                               setGraphicObject( "RectangleObject" )
\                       ))));
\
\  shadow=getViewProperty("2DLook");if (hasCachedOption( "option.shadows") && shadow==null ||
\  shadow=="3D", class->setShadow(3, RGB(0,0,128)));
\  names = class->addCompartment( "RectangleInvisible", "Names" );
\  names->setLayoutConstraints( insets(1,1,0,0), preferredWidth(50), fixedHeight(true) );
\
\  if(!hasViewProperty("hideAll") && !hasProperty("$typedef"),
\
\    areControlBars=hasCachedOption( "option.controlbars");
\
\    skipAttributes=hasPropertyValue("$language", "csharp") && hasProperty("$interface");
\
\    attributesTitle=if(hasPropertyValue("$language","csharp"), "Fields", "Attributes");
\    if ( !skipAttributes,
\           hideAttributes=hasViewProperty("hideAttributes");
\           if( areControlBars,
\          class->addToCompartment(compartmentControlBar("hideAttributes",attributesTitle,hideAttributes),null)
\       );
\       
\           if(!hideAttributes,
## parameter - show top line
\               attributes= makeScrolledRectangle( !areControlBars );
\               attributes->setElementName(attributesTitle);
\               class->addToCompartment(attributes,null);
\               setGraphicProperty("ac#", attributes);
\               attributes->setLayoutConstraints(preferredWidth(50),preferredHeight(10),fixedHeight(true))
\       )
\       );
\
\    hideOperations=hasViewProperty("hideOperations");
\    if( areControlBars,
\      class->addToCompartment(compartmentControlBar("hideOperations","Operations",hideOperations),null)
\    );
\
\    if(!hideOperations,
\      operations= makeScrolledRectangle( !areControlBars );
\      operations->setElementName("Operations");
\      class->addToCompartment(operations,null);
\      setGraphicProperty("oc#", operations);
\      operations->setLayoutConstraints(preferredWidth(50),minHeight(16),fixedHeight(true))
\    );
\    
\    if ((hasProperty("$hasInnerClasses") || hasProperty("trtelement")),
\        hideClasses=hasViewProperty("hideClasses");
\        if( areControlBars,
\          cBarItem=compartmentControlBar("hideClasses","Classes",hideClasses,"ClassesControl");
\         class->addToCompartment(cBarItem,null);
\         cBarNode=cBarItem->getNode();
\
\          setGraphicProperty("ClassBar", cBarNode)
\        );
\
\        if(!hideClasses,
\          classes= makeScrolledRectangle( !areControlBars );
\          classes->setElementName("Classes");
\          class->addToCompartment(classes,null);
\          classes->setLayoutConstraints(preferredWidth(50),preferredHeight(10),fixedHeight(true));
\          setGraphicProperty("cc#", classes)
\        )
\    );
\
#hasProperty("") here should be request for property "if the class has properties"
\    if ((true),
\        hideProperties=hasViewProperty("hideProperties");
\        if( areControlBars,
\         pBarItem=compartmentControlBar("hideProperties","Properties",hideProperties,"BeanPropertiesControl");
\         class->addToCompartment(pBarItem,null);
\         pBarNode=pBarItem->getNode();
\        if(!hideProperties,
\         pBarNode->setVisible(false));
\
\          setGraphicProperty("PropertyBar", pBarNode)
\        );
\
\        if(!hideProperties,
\          beanProperties= makeScrolledRectangle( !areControlBars );
\          beanProperties->setElementName("BeanProperties");
\          class->addToCompartment(beanProperties,null);
\          beanProperties->setLayoutConstraints(preferredWidth(50),preferredHeight(10));
\
\          beanProperties->setVisible(false)
\        )
\    );
\
#hasProperty("") here should be request for property "if the class has events"
\    if ((true),
\        hideEvents=hasViewProperty("hideEvents");
\        if( areControlBars,
\         eBarItem=compartmentControlBar("hideEvents","Events",hideEvents,"BeanEventsControl");
\         class->addToCompartment(eBarItem,null);
\         eBarNode=eBarItem->getNode();
\        if(!hideEvents,
\         eBarNode->setVisible(false));
\
\          setGraphicProperty("EventBar", eBarNode)
\        );
\
\        if(!hideEvents,
\          beanEvents= makeScrolledRectangle( !areControlBars );
\          beanEvents->setElementName("BeanEvents");
\          class->addToCompartment(beanEvents,null);
\          beanEvents->setLayoutConstraints(preferredWidth(50),preferredHeight(10));
\
\          beanEvents->setVisible(false)
\        )
\     )
\  );
\  markersCompartment = class->addCompartment( "RectangleInvisible", "MarkersCompartment" );
\  markersCompartment->setLayoutConstraints( minHeight(10), fixedHeight(true));
\  markers = markersCompartment->addCompartment( "RectangleInvisible", "Markers" );
\  markers->setLayoutConstraints( widthAlign("parentDefined"), heightAlign("parentDefined"), toDecreaseWidth(true) );
\  markers->setLayout( "Move" );
\  if( hasProperty("$readOnly") && !hasProperty("$compiled"),
\      readonlyMark=markers->addCompartment( "LockMark", "lockMark" );
\      readonlyMark->setLayoutConstraints( minWidth(10), minHeight(10), horizontalAlign("right") )
\    );
\  if( hasViewProperty("$imported") && !hasProperty("$ejbRole") &&
\      ( !hasCachedDiagramPropertyValue( "$shapeType", "ClassDiagram" ) || hasCachedDiagramProperty( "$physicalPackage" ) ),
\      importedMark=markers->addCompartment( "ShortcutMark", "shortcutMark" );
\      importedMark->setLayoutConstraints( minWidth(12), minHeight(10), horizontalAlign("left") )
\    );
\  if( hasProperty("$compiled"),
\      exclamationMark=markers->addCompartment( "ExclamationMark", "exclamationMark" );
\      exclamationMark->setLayoutConstraints( minWidth(10), minHeight(10), horizontalAlign("right") )
\    );
\
\  if (hasCachedOptionValue("option.referenced", "Show Name"),
\    forEachInDo(
\      baseClassProperty,
\      properties("$extends"),
\      (
\        ref = %diagram%->findReference(findElement(baseClassProperty->getSubproperty("$referencedElement")));
\        if ( ref == null || !ref->hasViewProperty("$visible"),
\          baseClassLabel = addToCompartment(label(baseClassProperty->getValue()), "Names");
\          baseClassLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\          baseClassLabel->setAlignment("Right");
\          baseClassLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\        )
\      )
\    );
\    forEachInDo(
\      baseClassProperty,
\      properties("$implements"),
\      (
\        ref = %diagram%->findReference(findElement(baseClassProperty->getSubproperty("$referencedElement")));
\        if ( ref == null || !ref->hasViewProperty("$visible"),
\          baseClassLabel = addToCompartment(label(baseClassProperty->getValue()), "Names");
\          baseClassLabel->setFont(%defaultFontName%, "Italic", %defaultFontSize%);
\          baseClassLabel->setAlignment("Right");
\          baseClassLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\        )
\      )
\    )
\  );
\
\  if( hasProperty("stereotype") && !(hasPropertyValue( "stereotype", "actor" ) && !(hasProperty("trtelement") && !hasProperty("useStereotypeIcon")))
\                                && !hasPropertyValue( "stereotype", "Boundary" )
\                                && !hasPropertyValue( "stereotype", "Entity" )
\                                && !hasPropertyValue( "stereotype", "Control" ),
\      stereoLabel = addToCompartment(label("<<"+getProperty("stereotype")+">>"), "Names");
\      stereoLabel->setInplaceEditor({property:="stereotype"});
\      stereoLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      stereoLabel->setAlignment("Center");
\      stereoLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\  if( hasProperty("$interface") && !hasViewProperty("showCircle"),
\      interfaceLabel = addToCompartment(label("interface"), "Names");
\      interfaceLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      interfaceLabel->setAlignment("Center");
\      interfaceLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\  if( hasProperty("$valuetype"),
\      interfaceLabel = addToCompartment(label("valuetype"), "Names");
\      interfaceLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      interfaceLabel->setAlignment("Center");
\      interfaceLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\  if( hasProperty("$struct"),
\      interfaceLabel = addToCompartment(label("struct"), "Names");
\      interfaceLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      interfaceLabel->setAlignment("Center");
\      interfaceLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\  if( hasProperty("$enum"),
\      interfaceLabel = addToCompartment(label("enum"), "Names");
\      interfaceLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      interfaceLabel->setAlignment("Center");
\      interfaceLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\  if( hasProperty("$union"),
\      interfaceLabel = addToCompartment(label("union"), "Names");
\      interfaceLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      interfaceLabel->setAlignment("Center");
\      interfaceLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\  if( hasProperty("$exception"),
\      interfaceLabel = addToCompartment(label("exception"), "Names");
\      interfaceLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      interfaceLabel->setAlignment("Center");
\      interfaceLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\  if( hasProperty("$typedef"),
\      interfaceLabel = addToCompartment(label("typedef"), "Names");
\      interfaceLabel->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
\      interfaceLabel->setAlignment("Center");
\      interfaceLabel->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
\    );
\
\  name = getProperty("alias");
\  if(name == null,
\    if( (hasPropertyValue("$language","java") || hasPropertyValue("$language","design") ) 
\        && isInTheSamePackage(), 
\      name = getProperty("$name"), 
\      name = getProperty("$fullName")
\    );
\    name = name->replace("_", " ", "inside")
\  );
\  nameLabel = addToCompartment(label(name),"Names");
\  nameLabel->setElementName("nameLabel");
\  if (!hasProperty("alias"),
\    nameLabel->setInplaceEditor({inProperty:="$name", outProperty:="$classInplaceEditing", default:=true}),
\    nameLabel->setInplaceEditor({property:="alias", default:=true})
\  );
\  nameLabel->setAlignment("Center");
\  nameLabel->setAbbreviation("left",true,true);
\  if( hasProperty("$abstract"),
\      nameLabel->setFont(%defaultFontName%, "BoldItalic", %defaultFontSize%),
\      nameLabel->setFont(%defaultFontName%, "Bold", %defaultFontSize%)
\    );
#--------- openMDX ---------------------------------------------------------------------------
\  if (getProperty("isAbstract") == "true",
\      nameLabel->setFont(%defaultFontName%, "BoldItalic", %defaultFontSize%),
\      nameLabel->setFont(%defaultFontName%, "Bold", %defaultFontSize%)
\    );
#--------- openMDX ---------------------------------------------------------------------------
#\  if( hasProperty("$template"),
#\      templateParam = addToCompartment(label( getProperty("$templateParamText") ), "Names");
#\      templateParam->setFont(%defaultFontName%, "Plain", %defaultFontSize%);
#\      templateParam->setAlignment("Right");
#\      templateParam->setLayoutConstraints(preferredHeight(16),fixedHeight(true))
#\    );
\  if( hasProperty("$hyperLink") || hasProperty("url"), nameLabel->setForeground(RGB(0,0,255)));
\  maxWidth = getIntegerOption("initialwidth");
\  setLayoutConstraints(minWidth(16),minHeight(16),preferredWidth(50),maxWidth(maxWidth));
\  setHorizontalMargin(5);
\  setCanHaveLinks()
;\  if(hasPropertyValue("showas", "hidden"), hideGraphicElement())

#\  if( !isInTheSamePackage(), hideGraphicElement() );

