/*
 * ====================================================================
 * Project:     openmdx, http://www.openmdx.org/
 * Name:        $Id: BoundedBuffer.jt,v 1.1 2005/12/22 19:01:12 hburger Exp $
 * Description: BoundedBuffer
 * Revision:    $Revision: 1.1 $
 * Owner:       OMEX AG, Switzerland, http://www.omex.ch
 * Date:        $Date: 2005/12/22 19:01:12 $
 * ====================================================================
 *
 * This software is published under the BSD license
 * as listed below.
 * 
 * Copyright (c) 2005, OMEX AG, Switzerland
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * 
 * * Neither the name of the openMDX team nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * ------------------
 * 
 * This product includes software developed by the Apache Software
 * Foundation (http://www.apache.org/).
 */
package org.openmdx.test.base.concurrent.locks;

#if defined(SINCE15)
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
#else
import org.openmdx.base.concurrent.locks.jre.before1_5.SimpleLock;
import org.openmdx.uses.java.util.concurrent.locks.Condition;
import org.openmdx.uses.java.util.concurrent.locks.Lock;
#endif

/**
 * Bounded Buffer
 */
public class BoundedBuffer {
   
    /**
     * Constructor
     * @param capacity
     * @param debug TODO
     */
    public BoundedBuffer(
        int capacity, 
        boolean debug
    ) {
        this.items = new Object[capacity];
        this.debug = debug;
    } 
    
    final boolean debug;
#if defined(SINCE15)
    final Lock lock = new ReentrantLock();
#else
    final Lock lock = new SimpleLock();
#endif    
    final Condition notFull  = lock.newCondition(); 
    final Condition notEmpty = lock.newCondition(); 

    final Object[] items;
    int putptr, takeptr, count;

    public void put(Object x) throws InterruptedException {
        lock.lock();
        try {
            while (count == items.length) {
                if(this.debug) System.out.println(
                    Thread.currentThread().getName() + ": Wait for buffer not full"
                );  
                notFull.await();
            }
            items[putptr] = x; 
            if (++putptr == items.length) putptr = 0;
            ++count;
            if(this.debug) System.out.println(
                Thread.currentThread().getName() + ": Signal buffer not empty"
            );  
            notEmpty.signal();
        } finally {
            lock.unlock();
        }
    }
    
    public Object take() throws InterruptedException {
        lock.lock();
        try {
            while (count == 0) {
                if(this.debug) System.out.println(
                    Thread.currentThread().getName() + ": Wait for buffer not empty"
                );  
                notEmpty.await();
            }
            Object x = items[takeptr]; 
            if (++takeptr == items.length) takeptr = 0;
            --count;
            if(this.debug) System.out.println(
                Thread.currentThread().getName() + ": Signal buffer not full"
            );  
            notFull.signal();
            return x;
        } finally {
            lock.unlock();
        }
    }

}
