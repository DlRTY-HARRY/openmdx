/*
 * ====================================================================
 * Project:     openmdx, http://www.openmdx.org/
 * Name:        $Id: ClockClient_1.jt,v 1.6 2008/03/07 22:22:07 hburger Exp $
 * Description: Clock Client 
 * Revision:    $Revision: 1.6 $
 * Owner:       OMEX AG, Switzerland, http://www.omex.ch
 * Date:        $Date: 2008/03/07 22:22:07 $
 * ====================================================================
 *
 * This software is published under the BSD license as listed below.
 * 
 * Copyright (c) 2004-2007, OMEX AG, Switzerland
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * 
 * * Neither the name of the openMDX team nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * ------------------
 * 
 * This product includes software developed by other organizations as
 * listed in the NOTICE file.
 */
package org.openmdx.test.clock1.rmi;

import java.util.Arrays;
import java.util.Properties;

import javax.jmi.reflect.RefPackage;
import javax.naming.Context;
import javax.naming.InitialContext;

import org.openmdx.base.accessor.generic.view.Manager_1;
import org.openmdx.base.accessor.jmi.spi.RefRootPackage_1;
import org.openmdx.base.text.format.DateFormat;
import org.openmdx.compatibility.application.dataprovider.transport.ejb.cci.Dataprovider_1ConnectionFactoryImpl;
import org.openmdx.compatibility.base.dataprovider.cci.RequestCollection;
import org.openmdx.compatibility.base.dataprovider.cci.ServiceHeader;
import org.openmdx.compatibility.base.dataprovider.transport.adapter.Provider_1;
import org.openmdx.compatibility.base.dataprovider.transport.delegation.Connection_1;
import org.openmdx.compatibility.base.exception.StackedException;
import org.openmdx.compatibility.base.naming.Path;
import org.openmdx.kernel.naming.Contexts;
import org.openmdx.kernel.naming.initial.ContextFactory;
import org.openmdx.model1.accessor.basic.cci.Model_1_0;

#if defined(BEFORE16) 
import org.openmdx.test.clock1.cci.Segment;
import org.openmdx.test.clock1.cci.SegmentClass;
#else
import org.openmdx.test.clock1.jmi1.Segment;
import org.openmdx.test.clock1.jmi1.SegmentClass;
#endif

/**
 * Class Loading Test
 */
public class ClockClient_1 {

	/**
	 * Constructor
	 * 
	 * @param name
	 */
	public ClockClient_1(
		String providerUrl
	) throws Exception {
	    Properties environment = new Properties();
	    environment.setProperty(
	        Context.INITIAL_CONTEXT_FACTORY,
	        ContextFactory.class.getName()
	    );
	    environment.setProperty(
			Context.PROVIDER_URL, 
			providerUrl
		);
	    RefPackage rootPkg = new RefRootPackage_1(
    		new Manager_1(
	            new Connection_1(
            		new Provider_1(
        				new RequestCollection(
    			            new ServiceHeader(),
    			            Dataprovider_1ConnectionFactoryImpl.createGenericConnection(
    			                new InitialContext(
    			                	environment
								).lookup(
									JNDI_NAME
								)
    			        	)	
    			        ),
        	            false
            		),
	                false
	            )
    		),
            null, // impls
            null, // context
            "cci",
            false
        );
        Model_1_0 model = ((RefRootPackage_1)rootPkg).refModel();
        model.addModels(
            Arrays.asList(
                new String[]{
					"org:w3c",
					"org:oasis-open",
					"org:openmdx:base",
					"org:omg:PrimitiveTypes",
					"org:omg:model1",
					"org:openmdx:compatibility:view1",
					"org:openmdx:test:clock1"
                }
            )
        );
        SegmentClass segmentClass = (SegmentClass) rootPkg.refClass(
            "org:openmdx:test:clock1:Segment"
        );
	    this.segment = segmentClass.getSegment(new Path(SEGMENT_PATH)); 
	}  
  
	/**
	 * 
	 * @param args
	 */
	public static void main(
		String[] args
	){
	    System.out.println(getTime());
	}

	/**
	 * 
	 */
	public static String getTime(
	){
	    try {
            return DateFormat.getInstance().format(
            	getInstance().segment.currentDateAndTime().getUtc()
            );
        } catch (Exception e) {
            return StackedException.toStackedException(e).toString();
        }
	}
  
	/**
	 * 
	 */
	private Segment segment;
  
	/**
	 * 
	 */
	static private final String SEGMENT_PATH = "xri:@openmdx:org.openmdx.test.clock1/provider/Java/segment/Remote";
	
	/**
	 * 
	 */
	static private final String JNDI_NAME = "org/openmdx/test/supports/clock";

	private static synchronized ClockClient_1 getInstance (
	) throws Exception {
	    if(instance == null) instance = new ClockClient_1(
	        "//localhost:" + Contexts.getRegistryPort() + '/' + Contexts.getNamingService()
	    );	    
	    return instance;
	}
	
	
	private static ClockClient_1 instance = null;
	
}
