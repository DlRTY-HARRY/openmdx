/*
 * ====================================================================
 * Project:     openmdx, http://www.openmdx.org/
 * Name:        $Id: AbstractTestObjectView_1.jt,v 1.4 2008/01/07 09:23:13 hburger Exp $
 * Description: junit for jdbc persistence
 * Revision:    $Revision: 1.4 $
 * Owner:       OMEX AG, Switzerland, http://www.omex.ch
 * Date:        $Date: 2008/01/07 09:23:13 $
 * ====================================================================
 *
 * This software is published under the BSD license as listed below.
 * 
 * Copyright (c) 2004-2007, OMEX AG, Switzerland
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * 
 * * Neither the name of the openMDX team nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * ------------------
 * 
 * This product includes software developed by other organizations as
 * listed in the NOTICE file.
 */
package org.openmdx.test.compatibility.base.dataprovider.layer.model;

import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import javax.naming.InitialContext;

import junit.framework.TestCase;

import org.openmdx.application.log.AppLog;
import org.openmdx.base.accessor.generic.view.Manager_1;
import org.openmdx.base.accessor.jmi.cci.RefPackage_1_0;
import org.openmdx.base.accessor.jmi.spi.RefRootPackage_1;
import org.openmdx.base.exception.ServiceException;
import org.openmdx.compatibility.application.dataprovider.transport.ejb.cci.Dataprovider_1ConnectionFactoryImpl;
import org.openmdx.compatibility.base.dataprovider.cci.Dataprovider_1_0;
import org.openmdx.compatibility.base.dataprovider.cci.RequestCollection;
import org.openmdx.compatibility.base.dataprovider.cci.ServiceHeader;
import org.openmdx.compatibility.base.dataprovider.transport.adapter.Provider_1;
import org.openmdx.compatibility.base.dataprovider.transport.cci.Provider_1_0;
import org.openmdx.compatibility.base.dataprovider.transport.delegation.Connection_1;
import org.openmdx.kernel.application.configuration.Report;
import org.openmdx.kernel.application.container.lightweight.LightweightContainer;
import org.openmdx.kernel.exception.BasicException;
import org.openmdx.kernel.log.SysLog;
import org.openmdx.kernel.text.format.IndentingFormatter;

#if defined(BEFORE16)
import org.openmdx.test.calendar1.cci.Calendar;
import org.openmdx.test.calendar1.cci.Year;
import org.openmdx.test.calendar1.cci.Day;
#else
import org.openmdx.test.calendar1.cci2.Calendar;
import org.openmdx.test.calendar1.cci2.Year;
import org.openmdx.test.calendar1.cci2.Day;
#endif

//---------------------------------------------------------------------------  
abstract class AbstractTestObjectView_1
  extends TestCase {

  //---------------------------------------------------------------------------  
  public AbstractTestObjectView_1(String name) {
      super(name);
  }  
  
  //---------------------------------------------------------------------------  
  protected void setUp(
  ) throws Exception {  
  	if(! deployed){
  		System.out.println("Deploying...");
  		LightweightContainer container = LightweightContainer.getInstance();
  		List reports = new ArrayList();
  		reports.add(
  				container.deployConnector(new URL(CONNECTOR_URL))
  		);
  		reports.addAll(
  				Arrays.asList(
  						container.deployApplication(new URL(PROVIDER_URL), null)
  				)
  		);
  		SysLog.info(
  				"Deployment Reports", new IndentingFormatter(reports)				
  		);
  		for(
  				Iterator i = reports.iterator();
  				i.hasNext();
  		) if(((Report)i.next()).isSuccess()) i.remove();
  		if(!reports.isEmpty()) throw new ServiceException(
  				BasicException.Code.DEFAULT_DOMAIN,
					BasicException.Code.INVALID_CONFIGURATION,
					new BasicException.Parameter[]{
  						new BasicException.Parameter("connector", CONNECTOR_URL),
							new BasicException.Parameter("application", PROVIDER_URL),
							new BasicException.Parameter("failures", reports)
  				},
					"Deployment failed"
  		);
  		deployed = true;
  	}
  	System.out.println(">>>> **** Start Test: " + this.getName());
//	providerPath = new Path("xri:@openmdx:org.openmdx.test.calendar1/provider/" + this.getName());
  	
  	// create manager
  	Dataprovider_1_0 connection = Dataprovider_1ConnectionFactoryImpl.createGenericConnection(
  			new InitialContext().lookup("org/openmdx/test/joining/explorer")
  	);
    Provider_1_0 provider = new Provider_1(
		  new RequestCollection(
        new ServiceHeader(),
				connection
      ),
      false
    );
    manager = new Manager_1(
      new Connection_1(
        provider,
        false
      )
    );    
  }

  //---------------------------------------------------------------------------  
  protected void tearDown(
  ) {
    try {
      String testName = "<<<< **** End Test: " + this.getName();        
      System.out.println(testName);
      AppLog.info(testName);
    }
    catch(Exception e) {
      System.out.println("error in deactivating");
    }
  }
  
  //---------------------------------------------------------------------------
  public void runTest(
  ) throws Throwable {
  	testCalendar();
  }

  //---------------------------------------------------------------------------  
  public void testCalendar(
  ) throws Exception {
	  System.out.println("getting root package...");
      RefPackage_1_0 rootPkg = new RefRootPackage_1(
	    manager,
	    null, // impls
	    null, // context
	    "cci",
	    false
	  );
	  rootPkg.refPackage(
          "org:openmdx:test:calendar1"
	  );
	  
	  // get calendar
	  Calendar calendar = (Calendar) rootPkg.refObject(
	      "xri:@openmdx:org.openmdx.test.calendar1/provider/Calendar/segment/Gregorian"
	  );
	  System.out.println("calendar=" + calendar);
		
	  // get year 2000
	  Year y2k = calendar.getYear("2000");
	  System.out.println("year=" + y2k);
	  
	  // get all days of year 2000
	  for(Iterator i = y2k.getDay().iterator(); i.hasNext(); ) {
	  	Day day = (Day)i.next();
	    System.out.println("day " + day); 	
	  }
  }

  //---------------------------------------------------------------------------  
  static private boolean deployed = false;
  
  static private Manager_1 manager = null;
//static private Path providerPath = null;  
  static private final String PROVIDER_URL = "file:src/ear/test-objectview.ear";
//static private final String CONNECTOR_URL = "file:src/connector/openmdx-2/sql-server-2000.rar";
  static private final String CONNECTOR_URL = "file:src/connector/openmdx-2/sql-server-2005.rar";
  
}

//--- End of File -----------------------------------------------------------
