##############################################################################
##
## Name:        $Id: common_macros.vm,v 1.2 2004/01/24 03:33:06 wfro Exp $
## Description: Velocity base macros for JMI generation
## Revision:    $Revision: 1.2 $
## Author:      $Author: wfro $
## Date:        $Date: 2004/01/24 03:33:06 $
## Copyright:   (c) 2002-2003 OMEX AG
##
##############################################################################


## ---------------------------------------------------------------------------
## Maps a list of namespace name components to a namespace name in the
## destination language.
##
#macro ( toNamespace $namespaceNameComponents)
#foreach ( $namespaceNameComponent in $namespaceNameComponents )
#if ( $velocityCount > 1)
.##
#end
$namespaceNameComponent##
#end
#if ( $targetPlatform == "dotnet" )
.cci.dotnet##
#else
.cci##
#end
#end

## ----------------------------------------------------------------------------
## Maps a primitive type to a primitive type of the target platform
##
#macro ( toType $qualifiedTypeName)
#set ( $elementName = $utils.getElementName( $qualifiedTypeName ) )
#if ( $model.isPrimitiveType( $qualifiedTypeName ) )
## $qualifiedTypeName denotes a primitive type
#if ( $qualifiedTypeName == "org:w3c:boolean" )
boolean##
#elseif ( $qualifiedTypeName == "org:w3c:short" )
short##
#elseif ( $qualifiedTypeName == "org:w3c:long" )
long##
#elseif ( $qualifiedTypeName == "org:w3c:integer" )
int##
#elseif ( $qualifiedTypeName == "org:w3c:binary" )
byte[]##
#elseif ( $qualifiedTypeName == "org:w3c:string" )
String##
#elseif ( $qualifiedTypeName == "ch:omex:generic:path" )
Object##
#elseif ( $qualifiedTypeName == "org:openmdx:base:ObjectId" )
Object##
#elseif ( $qualifiedTypeName == "org:w3c:dateTime" )
$DateType##
#elseif ( $qualifiedTypeName == "org:w3c:decimal" )
$DecimalType##
#else
## unknown primitive types are of type String
String##
#end
#elseif ( $model.isLocal( $qualifiedTypeName) )
## $qualifiedTypeName denotes a locally defined, non-primitive type
$elementName##
#else
## $qualifiedTypeName denotes a non-locally defined, non-primitive type
#toNamespace( $utils.getNameComponents( $utils.getPackageName( $qualifiedTypeName ) ) ).$elementName##
#end
#end


## ----------------------------------------------------------------------------
## Maps a primitive type to an object type known in the target language.
##
## This mapping is needed where values can be optional:
##
## e.g. for optional return values, i.e. where 'null' is a possible return value.
## (e.g. in Java: operation 'java.lang.Boolean foo()' instead of 'boolean foo()')
##
## e.g. for optional parameter values, i.e. where 'null' is a possible parameter
## value. (e.g. in Java: operation 'void bar(java.lang.Boolean)' instead of 
## 'void bar(boolean)')
##
#macro ( toObjectType $qualifiedTypeName)
##
## dotnet
##
#if ( $targetPlatform == "dotnet" )
#if ( $qualifiedTypeName  == "org:w3c:short" || $qualifiedTypeName == "org:w3c:long" || $qualifiedTypeName == "org:w3c:integer" )
Decimal##
#elseif ( $qualifiedTypeName == "org:w3c:boolean" )
Boolean##
#else
#toType( $qualifiedTypeName )##
#end
##
## jdk
##
#else
#if ( $qualifiedTypeName  == "org:w3c:short" )
Short##
#elseif ( $qualifiedTypeName == "org:w3c:long" )
Long##
#elseif ( $qualifiedTypeName == "org:w3c:integer" )
Integer##
#elseif ( $qualifiedTypeName == "org:w3c:boolean" )
Boolean##
#else
#toType( $qualifiedTypeName )##
#end
#end
#end

## ----------------------------------------------------------------------------
## Maps a method name to a method name that does not collide with an operation
## name in the root object class in the destination language (e.g. 
## java.lang.Object in Java). This mapping is needed to avoid that generated
## methods accidentally override methods inherited from the root object class.
##
#macro ( toMethodName $methodName)
## there is no conflict with 'setClass' but to have a symmetric solution to
## 'getClass' 'setClass' is treated like 'getClass'
#if ( $methodName == "getClass" || $methodName == "setClass" || $methodName == "equals" || $methodName == "hashCode" || $methodName == "notify" || $methodName == "notifyAll" || $methodName == "toString" || $methodName == "wait" || $methodName == "clone" || $methodName == "finalize" )
${methodName}_##
#else
$methodName##
#end
#end


## ----------------------------------------------------------------------------
## Maps a parameter name to a parameter name that does not collide with a
## keyword name in the destination language.
##
#macro ( toParamName $paramName)
#if ( $paramName == "abstract" || $paramName == "assert" || $paramName == "boolean" || $paramName == "break" || $paramName == "byte" || $paramName == "case" || $paramName == "catch" || $paramName == "char" || $paramName == "class" || $paramName == "const" || $paramName == "continue" || $paramName == "default" || $paramName == "do" || $paramName == "double" || $paramName == "else" || $paramName == "extends" || $paramName == "false" || $paramName == "final" || $paramName == "finally" || $paramName == "float" || $paramName == "for" || $paramName == "goto" || $paramName == "if" || $paramName == "implements" || $paramName == "import" || $paramName == "instanceof" || $paramName == "int" || $paramName == "interface" || $paramName == "long" || $paramName == "native" || $paramName == "new" || $paramName == "null" || $paramName == "package" || $paramName == "private" || $paramName == "protected" || $paramName == "public" || $paramName == "return" || $paramName == "short" || $paramName == "static" || $paramName == "strictfp" || $paramName == "super" || $paramName == "switch" || $paramName == "synchronized" || $paramName == "this" || $paramName == "throw" || $paramName == "throws" || $paramName == "transient" || $paramName == "true" || $paramName == "try" || $paramName == "void" || $paramName == "volatile" || $paramName == "while" )
${paramName}_##
#else
$paramName##
#end
#end


## ----------------------------------------------------------------------------
## Converts an array of primitive types to a list of objects
#macro ( arrayToList $attribute $listName $varName)
##
#if ( $targetPlatform == "dotnet" ) 
    $ListType $listName = new ArrayList();
    for(int i = 0; i < ${varName}.length; i++) {
      ${listName}.Add(
#else
    $ListType $listName = new ArrayList();
    for(int i = 0; i < ${varName}.length; i++) {
      ${listName}.add(
#end
#if ( $attribute.QualifiedTypeName == "org:w3c:integer" || $attribute.QualifiedTypeName == "org:w3c:short" || $attribute.QualifiedTypeName == "org:w3c:long" || $attribute.QualifiedTypeName == "org:w3c:boolean" )
        new #toObjectType( $attribute.QualifiedTypeName )($varName[i])
#else
        $varName[i]
#end
      );
    }
#end

## ----------------------------------------------------------------------------
#macro ( fileHeader )
#set ( $Id = "" )## workaround to avoid velocity warnings due to CVS id
//////////////////////////////////////////////////////////////////////////////
//
// Name: \$Id: common_macros.vm,v 1.2 2004/01/24 03:33:06 wfro Exp $
// Generated by: openMDX JMI Externalizer
// Date: $dateTime
//
// GENERATED - DO NOT CHANGE MANUALLY
//
//////////////////////////////////////////////////////////////////////////////
#end

## ----------------------------------------------------------------------------
#macro ( trace $text )
// ----------------------------------------------------------------------------
// $text
// ----------------------------------------------------------------------------
#end
