///*
// * ====================================================================
// * Project:     openmdx, http://www.openmdx.org/
// * Name:        $Id: UmlMapper.java,v 1.8 2008/04/02 17:38:40 wfro Exp $
// * Description: TogetherTemplate 
// * Revision:    $Revision: 1.8 $
// * Owner:       OMEX AG, Switzerland, http://www.omex.ch
// * Date:        $Date: 2008/04/02 17:38:40 $
// * ====================================================================
// *
// * This software is published under the BSD license
// * as listed below.
// * 
// * Copyright (c) 2005, OMEX AG, Switzerland
// * All rights reserved.
// * 
// * Redistribution and use in source and binary forms, with or
// * without modification, are permitted provided that the following
// * conditions are met:
// * 
// * * Redistributions of source code must retain the above copyright
// *   notice, this list of conditions and the following disclaimer.
// * 
// * * Redistributions in binary form must reproduce the above copyright
// *   notice, this list of conditions and the following disclaimer in
// *   the documentation and/or other materials provided with the
// *   distribution.
// * 
// * * Neither the name of the openMDX team nor the names of its
// *   contributors may be used to endorse or promote products derived
// *   from this software without specific prior written permission.
// * 
// * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
// * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
// * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// * POSSIBILITY OF SUCH DAMAGE.
// * 
// * ------------------
// * 
// * This product includes or is based on software developed by other 
// * organizations as listed in the NOTICE file.
// */
//
package org.openmdx.model1.mapping.together;

import java.io.Writer;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.omg.model1.code.VisibilityKind;
import org.openmdx.model1.accessor.basic.cci.Model_1_3;
import org.openmdx.model1.code.AggregationKind;
import org.openmdx.model1.mapping.AliasDef;
import org.openmdx.model1.mapping.AttributeDef;
import org.openmdx.model1.mapping.ClassDef;
import org.openmdx.model1.mapping.MapperTemplate;
import org.openmdx.model1.mapping.MapperUtils;
import org.openmdx.model1.mapping.OperationDef;
import org.openmdx.model1.mapping.StructDef;
import org.openmdx.model1.mapping.StructuralFeatureDef;

@SuppressWarnings("unchecked")
public class UmlMapper
    extends MapperTemplate {
    
    //-----------------------------------------------------------------------
    public UmlMapper(
        Writer writer,
        Model_1_3 model
    ) {
        super(
            writer,
            model
        );
    }

    //-----------------------------------------------------------------------
    public void fileHeader(
    ) {
        this.pw.println("//////////////////////////////////////////////////////////////////////////////");
        this.pw.println("//");
        this.pw.println("// Name: $Id: UmlMapper.java,v 1.8 2008/04/02 17:38:40 wfro Exp $");
        this.pw.println("// Generated by openMDX UML Mapper for Together");
        this.pw.println("// Date: " + new Date().toString());
        this.pw.println("//");
        this.pw.println("// GENERATED - DO NOT CHANGE MANUALLY");
        this.pw.println("//");
        this.pw.println("//////////////////////////////////////////////////////////////////////////////");
    }

    // -----------------------------------------------------------------------
    public void trace(String text) {
        this.pw
            .println("// ----------------------------------------------------------------------------");
        this.pw.println("//" + text + "");
        this.pw
            .println("// ----------------------------------------------------------------------------");
    }

    // -----------------------------------------------------------------------
    public String getQualifiedNameCpp(
        String qualifiedTypeName
    ) {
        String cppName = "";
        List namespaceNameComponents = MapperUtils.getNameComponents(MapperUtils.getPackageName(qualifiedTypeName));
        int ii = 0;
        for (Iterator i = namespaceNameComponents.iterator(); i.hasNext(); ii++) {
            String component = (String) i.next();
            if (ii > 0) {
                cppName += "::";
            }
            cppName += component.replace('-', '_');
        }
        if (namespaceNameComponents.size() > 0) {
            cppName += "::";
        }
        cppName += MapperUtils.getElementName(qualifiedTypeName);
        return cppName;
    }

    // -----------------------------------------------------------------------
    public String getIncludeName(
        String qualifiedTypeName
    ) {
        String includeName = "";
        List namespaceNameComponents = MapperUtils.getNameComponents(MapperUtils.getPackageName(qualifiedTypeName));
        int ii = 0;
        for (Iterator i = namespaceNameComponents.iterator(); i.hasNext(); ii++) {
            String component = (String)i.next();
            if (ii > 0) {
                includeName += "/";
            }
            includeName += component;
        }
        if (namespaceNameComponents.size() > 0) {
            includeName += "/";
        }
        includeName += MapperUtils.getElementName(qualifiedTypeName) + ".h";
        return includeName;
    }

    // -----------------------------------------------------------------------
    public void mapAliasType(
        AliasDef aliasDef
    ) {
        String guard = aliasDef.getQualifiedName().toUpperCase().replace(':', '_').replace('-', '_') + "_H";
        this.pw.println("/* Generated by TopenMDX UML Mapper for Together */");
        this.pw.println("");
        this.pw.println("#ifndef " + guard);
        this.pw.println("#define " + guard);
        this.pw.println("");
        List namespaceComponents = MapperUtils.getNameComponents(MapperUtils.getPackageName(aliasDef.getQualifiedName()));
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            String namespace = i.next().toString().replace('-', '_');
            this.pw.println("namespace " + namespace + "{");
        }
        this.pw.println("/**");
        if (aliasDef.getAnnotation() != null) {
            this.pw.println(" * " + aliasDef.getAnnotation());
        }
        this.pw.println(" * @stereotype alias");
        this.pw.println(" */");
        this.pw.println("class " + aliasDef.getName() + " {");
        this.pw.println("private:");
        this.pw.print("  " + this.getQualifiedNameCpp(aliasDef.getQualifiedTypeName()) + " alias;");
        this.pw.println("};");
        this.pw.println("");
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            i.next();
            this.pw.println("}");
        }
        this.pw.println("#endif //" + guard);
    }

    // -----------------------------------------------------------------------
    public void mapStructEnd(
        StructDef structDef
    ) {
        this.pw.println("};");
        this.pw.println("");
        List namespaceComponents = MapperUtils.getNameComponents(MapperUtils.getPackageName(structDef.getQualifiedName()));
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            i.next();
            this.pw.println("}");
        }
        this.pw.println("#endif //" + structDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
        this.pw.println("    }");
    }

    // -----------------------------------------------------------------------
    public void mapStructBegin(
        StructDef structDef,
        Set includeTypes
    ) {
        this.pw.println("/* Generated by openMDX UML Mapper for Together */");
        this.pw.println("");
        this.pw.println("#ifndef " + structDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
        this.pw.println("#define " + structDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
        for (Iterator i = includeTypes.iterator(); i.hasNext();) {
            String includeType = (String) i.next();
            this.pw.println("#include \"" + this.getIncludeName(includeType) + "\"");
        }
        this.pw.println("");
        List namespaceComponents = MapperUtils.getNameComponents(MapperUtils
            .getPackageName(structDef.getQualifiedName()));
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            String namespace = (String) i.next();
            this.pw.println("namespace " + namespace + " {");
        }
        this.pw.println("/**");
        if (structDef.getAnnotation() != null) {
            this.pw.println(" * " + structDef.getAnnotation() + "");
        }
        this.pw.println(" * @stereotype struct");
        for (Iterator i = structDef.getStereotype().iterator(); i.hasNext();) {
            String stereotype = (String) i.next();
            this.pw.println(" * @stereotype " + stereotype);
        }
        this.pw.println(" * @isAbstract " + structDef.isAbstract());
        this.pw.println(" */");
        this.pw.print("class " + structDef.getName());
        if (structDef.getSupertypes().size() > 0) {
            this.pw.print(" :");
            int ii = 0;
            for (Iterator i = structDef.getSupertypes().iterator(); i.hasNext(); ii++) {
                ClassDef supertype = (ClassDef) i.next();
                this.pw.print(" public " + this.getQualifiedNameCpp(supertype.getQualifiedName()) + "");
                if (ii > 0) {
                    this.pw.print(",");
                }
            }
        }
        this.pw.println(" {");
    }

    // -----------------------------------------------------------------------
    public void mapPrimitiveType(
        ClassDef classDef
    ) {
        this.pw.println("/* Generated by openMDX UML Mapper for Together */");
        this.pw.println("");
        this.pw.println("#ifndef " + classDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
        this.pw.println("#define " + classDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
        this.pw.println("");
        List namespaceComponents = MapperUtils.getNameComponents(MapperUtils.getPackageName(classDef.getQualifiedName()));
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            String namespace = (String) i.next();
            this.pw.println("namespace " + namespace + " {");
        }
        this.pw.println("/**");
        if (classDef.getAnnotation() != null) {
            this.pw.println(" * " + classDef.getAnnotation());
        }
        this.pw.println(" * @stereotype primitive");
        this.pw.println(" */");
        this.pw.println("class " + classDef.getName() + " {");
        this.pw.println("};");
        this.pw.println("");
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            i.next();
            this.pw.println("}");
        }
        this.pw
            .println("#endif //" + classDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
    }

    // -----------------------------------------------------------------------
    public void mapClassReference(
        String label,
        String annotation,
        String clientCardinality,
        String clientQualifierName,
        String clientQualifierType,
        String clientConstraints,
        String clientRole,
        String supplierCardinality,
        String supplierQualifierName,
        String supplierQualifiedTypeName,
        String supplierQualifierType,
        String supplierConstraints,
        String supplierRole,
        String aggregation,
        Boolean isDirected,
        Boolean isDerived
    ) {        
        this.pw.println("private:");
        this.pw.println("    /**");
        if (annotation != null) {
            this.pw.println("     * " + annotation);
        }
        this.pw.println("     * @label " + label);
        this.pw.println("     * @clientRole " + clientRole);
        if (clientCardinality == "1..1") {
            this.pw.println("     * @clientCardinality 1");
        } else {
            this.pw.println("     * @clientCardinality " + clientCardinality);
        }
        if (clientQualifierName != null) {
            this.pw
                .println("     * @clientQualifier " + clientQualifierName + ": " + this.getQualifiedNameCpp(clientQualifierType) + "");
            this.pw.println("");
        }
        if (clientConstraints != null) {
            this.pw.println("     * @clientConstraints " + clientConstraints);
        }
        this.pw.println("     * @supplierRole " + supplierRole);
        if (supplierCardinality == "1..1") {
            this.pw.println("     * @supplierCardinality 1");
        } else {
            this.pw.println("     * @supplierCardinality " + supplierCardinality);
        }
        if (supplierQualifierName != null) {
            this.pw
                .println("     * @supplierQualifier " + supplierQualifierName + ": " + this.getQualifiedNameCpp(supplierQualifierType) + "");
            this.pw.println("");
        }
        if (supplierConstraints != null) {
            this.pw.println("     * @supplierConstraints " + supplierConstraints);
        }
        if (AggregationKind.SHARED.equals(aggregation)) {
            this.pw.println("     * @link aggregation");
        }
        else if(AggregationKind.COMPOSITE.equals(aggregation)) {
            this.pw.println("     * @link aggregationByValue");
        }
        if((isDirected != null) && isDirected.booleanValue()) {
            this.pw.println("     * @directed");
        } else {
            this.pw.println("     * @undirected");
        }
        this.pw.println("     * @isDerived " + isDerived);
        this.pw.println("     */");
        this.pw.println("    " + this.getQualifiedNameCpp(supplierQualifiedTypeName) + " * lnk" + supplierRole.toUpperCase() + ";");
    }

    // -----------------------------------------------------------------------
    public void mapClassOperation(
        OperationDef operationDef
    ) {
        if (VisibilityKind.PUBLIC_VIS.equals(operationDef.getVisibility())) {
            this.pw.println("public:");
        } else {
            this.pw.println("private:");
        }
        this.pw.println("    /**");
        if (operationDef.getAnnotation() != null) {
            this.pw.println("     * " + operationDef.getAnnotation());
        }
        this.pw.println("     * @isQuery " + operationDef.isQuery());
        this.pw.println("     */");
        this.pw
            .println("    " + this.getQualifiedNameCpp(operationDef.getQualifiedReturnTypeName()) + " " + operationDef.getName() + "(");
        int ii = 0;
        for (Iterator i = operationDef.getParameters().iterator(); i.hasNext(); ii++) {
            AttributeDef param = (AttributeDef) i.next();
            if (ii > 0) this.pw.println(",");
            this.pw.println("      " + this.getQualifiedNameCpp(param.getQualifiedTypeName()) + " " + param.getName() + "");
        }
        this.pw.println("    );");
        this.pw.println("");
    }

    // -----------------------------------------------------------------------
    public void mapClassEnd(ClassDef classDef) {
        this.pw.println("};");
        this.pw.println("");
        List namespaceComponents = MapperUtils.getNameComponents(MapperUtils.getPackageName(classDef.getQualifiedName()));
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            i.next();
            this.pw.println("}");
        }
        this.pw.println("#endif //" + classDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
    }

    // -----------------------------------------------------------------------
    public void mapClassBegin(
        ClassDef classDef, 
        Set includeTypes
    ) {
        this.pw.println("/* Generated by openMDX UML Mapper for Together */");
        this.pw.println("");
        this.pw.println("#ifndef " + classDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
        this.pw.println("#define " + classDef.getQualifiedName().toUpperCase().replace(':', '_') + "_H");
        for (Iterator i = includeTypes.iterator(); i.hasNext();) {
            String includeType = (String) i.next();
            this.pw.println("#include \"" + this.getIncludeName(includeType) + "\"");
        }
        this.pw.println("");
        List namespaceComponents = MapperUtils.getNameComponents(MapperUtils
            .getPackageName(classDef.getQualifiedName()));
        for (Iterator i = namespaceComponents.iterator(); i.hasNext();) {
            String namespace = (String) i.next();
            this.pw.println("namespace " + namespace + " {");
        }
        this.pw.println("/**");
        if (classDef.getAnnotation() != null) {
            this.pw.println(" * " + classDef.getAnnotation());
        }
        for (Iterator i = classDef.getStereotype().iterator(); i.hasNext();) {
            String stereotype = (String) i.next();
            this.pw.println(" * @stereotype " + stereotype);
        }
        this.pw.println(" * @isAbstract " + classDef.isAbstract());
        this.pw.println(" */");
        this.pw.print("class " + classDef.getName());
        if (classDef.getSupertypes().size() > 0) {
            this.pw.print(" :");
            int ii = 0;
            for (Iterator i = classDef.getSupertypes().iterator(); i.hasNext(); ii++) {
                ClassDef supertype = (ClassDef) i.next();
                if (ii > 0) this.pw.print(", ");
                this.pw.print(" public " + this.getQualifiedNameCpp(supertype.getQualifiedName()) + "");
            }
        }
        this.pw.println(" {");
    }

    // -----------------------------------------------------------------------
    public void mapClassAttribute(
        StructuralFeatureDef attributeDef,
        Number maxLength
    ) {
        if (VisibilityKind.PUBLIC_VIS.equals(attributeDef.getVisibility())) {
            this.pw.println("public:");
        } else {
            this.pw.println("private:");
        }
        this.pw.println("    /**");
        if (attributeDef.getAnnotation() != null) {
            this.pw.println("     * " + attributeDef.getAnnotation());
        }
        if (attributeDef.getMultiplicity() != null) {
            this.pw.println("     * @stereotype " + attributeDef.getMultiplicity());
        }
        this.pw.println("     * @isDerived " + attributeDef.isDerived());
        this.pw.println("     * @isChangeable " + attributeDef.isChangeable());
        this.pw.println("     * @maxLength " + maxLength);
        this.pw.println("     */");
        this.pw.println("    " + this.getQualifiedNameCpp(attributeDef.getQualifiedTypeName()) + " " + attributeDef.getName() + ";");
        this.pw.println("");
    }

    // -----------------------------------------------------------------------
    public void mapStructField(
        StructuralFeatureDef fieldDef,
        Number maxLength
    ) {
        this.pw.println("public:");
        this.pw.println("    /**");
        if (fieldDef.getAnnotation() != null) {
            this.pw.println("     * " + fieldDef.getAnnotation());
        }
        if (fieldDef.getMultiplicity() != null) {
            this.pw.println("     * @stereotype " + fieldDef.getMultiplicity());
        }
        this.pw.println("     * @maxLength " + maxLength);
        this.pw.println("     */");
        this.pw.println("    " + this.getQualifiedNameCpp(fieldDef.getQualifiedTypeName()) + " " + fieldDef.getName() + ";");
        this.pw.println("");
    }
    
}
