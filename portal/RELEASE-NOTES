Distribution Name: openMDX/Portal
Release Name: openMDX/Portal 2.13.0
Release Date: 2014-08-01

---------------------------------------------------------------------
Notes:

  This software is published under the BSD license
  as listed below.
  
  Copyright (c) 2006-2014, OMEX AG, Switzerland
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions 
  are met:
  
  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.
  
  * Neither the name of OMEX AG nor the names of the contributors
    to openMDX may be used to endorse or promote products derived
    from this software without specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
  
  ------------------
  
  This product includes software developed by the Apache Software
  Foundation (http://www.apache.org/). 

---------------------------------------------------------------------

==============================================================================
Version 2.13.0                                                      2014-08-01
==============================================================================

1.    NEW FEATURES
      
      CR10012252
      User-defined ordering of grid columns. Based on an existing UI customization, 
      the user is be able to re-order grid columns (columns defined up to maxMember).
      The grid menu 'View' offers the column order operators. The ordering is
      stored in the user settings per grid.

      CR10012238
      Search field definitions. Allow to customize the behaviour of search fields, 
      e.g. show pre-defined drop down values for code fields. The method 
      PortalExtension_1_0.getSearchFieldDef() returns a SearchFieldDef for a given 
      search field. In defined, an auto-completer is rendered for this field. When 
      triggered, the action FindSearchFieldValuesAction is invoked which finally calls 
      the method SearchFieldDef.findFieldValues(). By default, code fields are handled 
      by CodeSearchFieldDef.

      CR20021569
      Support for jquery, bootstrap. Portal now supports the jquery and bootstrap
      libraries. Existing wizards, etc. must be migrated as follows:

      The following class names are be renamed in ssf.css
      * nav -> ssf-nav
      * navv -> ssf-navv
      * navigation -> ssf-navigation

      The following class names are renamed in n2default.css
      * label -> fieldLabel

      The following styles must be included in non-inplace wizards:

		<link rel="stylesheet" href="../../javascript/bootstrap/css/bootstrap.min.css">	
		<link rel="stylesheet" href="../../_style/colors.css">
		<link rel="stylesheet" href="../../_style/n2default.css">
		<link rel="stylesheet" href="../../_style/ssf.css"

      Custom n2default.css must be migrated as follows:

		@import url('base-styles.css');

		/* Add custom styles below */
		...
      
      CR20020830
      Inject user-defined components. Custom control factories are defined in 
      the portal extension, e.g. In the example below MyControlFactory returns 
      MyShowInspectorControl for all object types. MyShowInspectorControl adds 
      an additional attribute pane to the inspectors of all object types:

		public static class MyShowInspectorControl extends ShowInspectorControl {

			public MyShowInspectorControl(
				String id, 
				int perspective,
				String locale,
				int localeAsIndex,
				PortalExtension_1_0.ControlFactory controlFactory,
				WizardDefinitionFactory wizardDefinitionFactory,
				org.openmdx.ui1.jmi1.Inspector inspectorDef,
				String forClass
			) {
				super(
					id,
					perspective,
					locale,
					localeAsIndex,
					controlFactory,
					wizardDefinitionFactory,
					inspectorDef,
					forClass
				);
				int paneIndex = this.attributePaneControls.size();
				this.attributePaneControls.add(
					0,
					new UserAttributePaneControl(
						"./wizards/MyUserAttributePaneControl.jsp",
						locale,
						localeAsIndex,
						controlFactory,
						paneIndex++
					)
				);
			}

		}

		public static class MyControlFactory extends DefaultControlFactory {

			@Override
			protected ShowInspectorControl newShowInspectorControl(
				String id,
				int perspective, 
				String locale, 
				int localeAsIndex,
				ControlFactory controlFactory,
				WizardDefinitionFactory wizardDefinitionFactory,
				Inspector inspectorDef, 
				String forClass
			) {
				return new MyShowInspectorControl(
					id,
					perspective,
					locale,
					localeAsIndex,
					controlFactory,
					wizardDefinitionFactory,
					inspectorDef,
					forClass        
				);
			}

		}

		@Override
		protected ControlFactory newControlFactory(
		) {  
			return new MyControlFactory();
		}

      The UserAttributePaneControl is rendered by the JSP MyUserAttributePaneControl.jsp:

		<%@page contentType="text/html;charset=UTF-8" language="java" pageEncoding="UTF-8" %>
		<%@taglib prefix="t" tagdir="/WEB-INF/tags" %>
		<%@ page session="true" import="
		java.util.*,
		java.io.*,
		java.text.*,
		org.opencrx.kernel.portal.*,
		org.openmdx.kernel.id.cci.*,
		org.opencrx.kernel.activity1.jmi1.*,
		org.opencrx.kernel.backend.*,
		org.opencrx.kernel.portal.wizard.*,
		org.openmdx.kernel.id.*,
		org.openmdx.base.accessor.jmi.cci.*,
		org.openmdx.base.exception.*,
		org.openmdx.portal.servlet.*,
		org.openmdx.portal.servlet.attribute.*,
		org.openmdx.portal.servlet.component.*,
		org.openmdx.portal.servlet.control.*,
		org.openmdx.portal.servlet.wizards.*,
		org.openmdx.base.naming.*,
		org.openmdx.kernel.log.*,
		org.openmdx.kernel.exception.*
		"%>
		<%!

		public static class MyUserAttributePaneController extends org.openmdx.portal.servlet.AbstractWizardController {

			public void doRefresh(
			) {
			}

		}

		%>
		<%
			MyUserAttributePaneController wc = new MyUserAttributePaneController();
		%>
		<t:wizardHandleCommand controller='<%= wc %>' defaultCommand='Refresh' />
		<%
			ApplicationContext app = wc.getApp();
			javax.jdo.PersistenceManager pm = wc.getPm();
			RefObject_1_0 obj = wc.getObject();
			String paneId = wc.getRequestParameter("paneId");
		%>
		<div id="userPane<%= paneId %>">
			<pre>
				Name: <%= this.getClass().getName() %>
				Xri: <%= wc.getObject().refMofId() %>
				RequestId: <%= wc.getRequestId() %>
			</pre>
		</div>

      CR10011897
      Portal: Next / Prev. Next / Prev allows to iterate the content of a grid 
      at inspector-level.
      
2.    CHANGES  
     
2.0.  CHANGED FEATURES
      none
            
2.1.  FIXED BUGS
      none      
      
2.2.  DEPRECATED FEATURES
      
      CR20021827
      Deprecate MOBILE mode. Replace MOBILE mode by bootstrap fluid grid system.

            
2.3   REMOVED FEATURES
      none

==============================================================================
Version 2.12.7                                                      2013-11-04
==============================================================================

1.    NEW FEATURES
      
      CR10011700
      Unify edit and new object. The "New..." object form allows to lookup 
      (with auto-completer) existing objects. If an object is selected, the form 
      is pre-filled with the selected object values. After editing the form, the 
      user can then choose either to "Create" (a new) or "Save" (the existing) object. 
      If no existing object is selected, the user only can "Create".

      CR10011691
      Ui1: css classes for UI elements. Custom css classes for UI elements. 
      Allow to specify different classes for field groups and object containers. 
      Css classes are customized in UI XML files with the properties cssClassFieldGroup
      and cssClassObjectContainer, e.g.      
      
		<org.openmdx.ui1.ElementDefinition name="org:openmdx:kernel:activity1:Activity:name">
			<_object>
				<active>true</active>
				<toolTip>
					<_item>Name of activity</_item>
				</toolTip>
				<label>
					<_item>Name</_item>
				</label>
				<order>
					<_item>0</_item>
					<_item>0</_item>
					<_item>10</_item>
				</order>
				<cssClassFieldGroup>classActivityName1</cssClassFieldGroup>
				<cssClassObjectContainer>classActivityName2</cssClassObjectContainer>
			</_object>
			<_content/>
		</org.openmdx.ui1.ElementDefinition>

      CR10011280
      Grids: show total rows. The total rows in a grid are calculated when 
      going to a page with number > 0. Once calculated, the total rows are
      displayed for this grid. 

      CR10010108
      Cascading code fields. Code fields are rendered as cascaded drop-downs for
      {main category} and {sub category} in case their long texts have the format 
      {main category}|{sub category}.
      
      CR10011631
      Grids: custom queries for object identities.
      Grids should support custom-queries for object identities. The search form displays an 
      additional search field in case PortalExtension.getQuery() returns a non-null query for 
      the feature 'grid.getReferencedTypeName() + ":" + identity'.
      
      Example:
      Activities are searched for the attributes name, description or detailedDescription 
      if getQuery() returns the query-extension
      
      (UPPER(v.name) LIKE UPPER(" + s0 + ") OR UPPER(v.name) LIKE " + s1 + " OR UPPER(v.description) 
      LIKE UPPER(" + s2 + ") OR UPPER(v.description) LIKE " + s3 + " OR UPPER(v.detailed_description) 
      LIKE UPPER(" + s4 + ") OR UPPER(v.detailed_description) LIKE " + s5 + ")"
       
      for the feature 'org:opencrx:kernel:activity1:Activity:identity'. 
      
      CR10011507
      JoiningListDataBinding. Data binding which allows to collect objects from 
      a specified set of reference features and display in a grid.
            
2.    CHANGES  
     
2.0.  CHANGED FEATURES
      none
            
2.1.  FIXED BUGS
      none      
      
2.2.  DEPRECATED FEATURES
      none      
            
2.3   REMOVED FEATURES
      none

~ ~ ~

